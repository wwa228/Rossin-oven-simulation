Local device count 1 
local devices [CpuDevice(id=0)]
---------------------------------------------------------------------------------------------------- 
Optimization of ['R13SSR1'] with warm start from log\R13SSR4\2024-12-27 20_47_09.835171
---------------------------------------------------------------------------------------------------- 
Arguments
{'atol': 1e-08,
 'cpus': 1,
 'gen': 200,
 'id': '',
 'iterations': 100,
 'load_dir': 'log\\R13SSR4\\2024-12-27 20_47_09.835171',
 'lr': 0.01,
 'msg': '',
 'mxstep': 10000,
 'optimize': 1,
 'partition': '',
 'products_test': '',
 'products_train': 'R13SSR1',
 'recirculation': 0,
 'rtol': 1e-06} 
----------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- 
Product and simulation specific oven constants 
R13 : {'density_air': 1,
 'density_particle': 2500,
 'density_product': 7.60855,
 'enthalpy_vaporization_water': 2000000.0,
 'equilibrium_moisture': 0.008,
 'ntimes': 15,
 'ny': 20,
 'nzones': 5,
 'product_height': 0.1,
 'radius_particle': 4e-06,
 'reverse_zone': 3,
 'specific_heat_capacity_air': 1047,
 'specific_heat_capacity_solid': 800}
---------------------------------------------------------------------------------------------------- 
Experiment specific controls and targets 
R13SSR1 : Product(controls={'init_velocity_air': Array([0.097, 0.086, 0.115, 0.207, 0.207], dtype=float64), 'init_temperature_air': Array([492.44444444, 492.44444444, 506.33333333, 509.11111111,
       509.11111111], dtype=float64), 'residence_time': Array([14.], dtype=float64, weak_type=True), 'init_moisture_air': Array([0.01, 0.01, 0.01, 0.01, 0.01], dtype=float64), 'recirculation_ratio': Array([0., 0., 0., 0., 0.], dtype=float64)}, targets={5: array([301.18545, 328.4849 , 330.88525, 331.0218 , 330.82675, 331.1192 ,
       332.01615, 332.1526 , 332.1331 , 332.484  , 332.562  , 332.6594 ,
       332.52295, 332.85425, 343.1604 , 358.54305, 374.51835, 389.95025,
       404.1808 , 417.948  , 430.2925 , 436.67855, 439.0184 , 442.48925,
       447.0542 , 449.33835, 451.05685, 455.6276 , 460.94815, 464.77145,
       467.66375, 470.2924 , 472.87985, 471.88925, 461.3119 , 444.43445,
       424.94635, 404.56145, 384.97925, 369.3213 , 358.7903 , 354.2196 ,
       354.51125, 359.33455, 370.05125, 385.2176 , 401.6098 , 422.76865,
       442.9116 , 457.91355, 468.1086 , 475.24405, 480.6961 , 484.64975,
       487.5318 , 490.08945, 492.6653 , 495.0581 , 497.16785, 498.6337 ,
       499.4767 , 499.2759 , 498.71385, 498.1718 , 497.6096 , 497.14765,
       496.64545, 496.24365, 495.92225, 495.6007 , 495.33945, 495.1184 ,
       495.038  , 494.9174 , 494.31425, 415.73065, 311.6518 , 305.24855,
       302.60185, 302.76115, 302.4418 ])}, targets_mask={'mask': Array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.], dtype=float64), 'target_map': Array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float64)})
---------------------------------------------------------------------------------------------------- 
def _mass_transfer_coefficient(x, B, c):
    # negative value is eliminated in the final equation using exp

    X, Ts, Y, Ta, Ye = x
    
    if isinstance(B, dict):

        x =  jnp.append(jnp.append(X, jnp.append(Ts, jnp.append(Ta, Y))), c.density_product)
        n = len(B["weight"])
        for i, (weight, bias) in enumerate(zip(B["weight"], B["bias"])):
            x = jnp.dot(weight, x) + bias
            if i < n - 1:
                x = jnp.tanh(x)

        return jnp.exp(x)
    else: return B

---------------------------------------------------------------------------------------------------- 
def _heat_transfer_coefficient(x, A, c):
    # negative value is eliminated in the final equation using exp
    
    X, Ts, Y, Ta, Ye = x
    
    if isinstance(A, dict):
        x =  jnp.append(jnp.append(X, jnp.append(Ts, jnp.append(Ta, Y))), c.density_product)
        n = len(A["weight"])
        for i, (weight, bias) in enumerate(zip(A["weight"], A["bias"])):
            x = jnp.dot(weight, x) + bias
            if i < n - 1 :
                x = jnp.tanh(x) 
        
        return jnp.exp(x)
    else: return A

---------------------------------------------------------------------------------------------------- 
def moisture_content(T, density_air, relative_humidity = 1):
    # calculates the equilibrium moisture content in the air at given temperature
    # assumes ideal gas law
    mw_air = 28.96e-3 # kg/mol molecular weight of air
    mw_water = 18.01e-3 # kg/mol molecular weight of water 
    P_sat = saturated_pressure(T) # Pa
    return vapor_pressure_to_moisture(P_sat, T, density_air, relative_humidity)

---------------------------------------------------------------------------------------------------- 
scaled_reaction_rate = lambda A, k0, T : k0 * jnp.exp( - A / 1.98 / unscale_states(T, temperature_max, temperature_min))

---------------------------------------------------------------------------------------------------- 
Training Experiments target heights
R13SSR1 : dict_keys([5])
Testing experiments target heights
R13SSR1 : dict_keys([5])
---------------------------------------------------------------------------------------------------- 
def _objective(meta_params : dict, solid_moisture_init : jnp.ndarray, solid_moisture_sigma : jnp.ndarray, constants : Constants, 
                target : jnp.ndarray, target_mask : jnp.ndarray, controls : Controls, solid_temperature_init : jnp.ndarray, 
                recirculation : bool, key) -> Tuple[jnp.ndarray]:
    
    ny = constants.ny
    xinit = jnp.column_stack((
        solid_moisture_init * jnp.ones(ny) + solid_moisture_sigma * jrandom.normal(key, shape = (ny, )), # moisture 
        solid_temperature_init * jnp.ones(ny), # temperature
        jnp.zeros(shape = (ny, )) # cure 
    ))

    _parameters = meta_params["parameters"]
    _parameters["reaction_rate"] = 2.33 * 10**7 # Do not optimize this yet
    _parameters["activation_energy"] = 20. * 10**3 # Do not optimize this yet

    # oven_dynamics discards the provided initial condition (It is assumed that the initial condition are the values of states at t = -1)
    solution = oven_dynamics(xinit, _parameters, controls, constants, reverse_zone = constants.reverse_zone, nzones = constants.nzones, recirculation = recirculation)
    moisture_solid, temperature_solid, cure, moisture_air, temperature_air, t_event = tree_util.tree_map(jnp.vstack, solution)

    # mse_cost = mean squared error cost. total_cost = mse_cost + regularization cost
    mse_cost = jnp.sum((temperature_solid * target_mask - target[1:])**2 * (ny - jnp.count_nonzero(target_mask)))
    total_cost = mse_cost
    return total_cost, mse_cost, xinit, *(moisture_solid, temperature_solid, cure, moisture_air, temperature_air, t_event)

---------------------------------------------------------------------------------------------------- 
Reading data from input file <_io.BufferedReader name='log\\R13SSR4\\2024-12-27 20_47_09.835171/saved_params/params'>
---------------------------------------------------------------------------------------------------- 
Initial guess of parameters {'parameters': Parameters(params={'constant': Array([2.10115877, 4.82538539, 4.81201084, 4.48567586, 5.00390438],      dtype=float64), 'constant_jump': Array([4.93839636], dtype=float64), 'critical_moisture': Array([0.08267712], dtype=float64), 'heat_transfer_coefficient_constant': Array([0.5661647], dtype=float64), 'heat_transfer_coefficient_falling': defaultdict(<class 'list'>, {'bias': [Array([-3.72966009e-01,  1.44542889e-01, -6.39972813e-02, -3.16707603e-02,
        1.31249768e-01, -3.07290237e-03,  8.73461047e-04, -2.17986576e-03,
        3.16654193e-03, -2.60600736e-04], dtype=float64), Array([-0.31151455,  0.12403204, -0.1158686 , -0.03497878,  0.14891127,
       -0.00782287, -0.01535812,  0.00156552, -0.00266264,  0.01263654],      dtype=float64), Array([0.10116913], dtype=float64)], 'weight': [Array([[-7.44034601e-02, -1.72248241e-02,  3.73792292e-03,
        -1.09782622e-01, -5.13244902e-02],
       [-6.39091691e-02,  1.44665954e-02, -1.27108190e-02,
        -8.21213833e-02, -6.78678968e-02],
       [ 1.52798113e-01,  9.47598558e-02,  1.12995493e-01,
         1.70144610e-01,  1.44021968e-01],
       [-7.92204688e-02, -2.17460409e-02,  2.23701200e-03,
        -1.19494788e-01, -5.69661502e-02],
       [-6.06430443e-02, -1.07777396e-05,  1.49966455e-03,
        -9.97240969e-02, -5.90640975e-02],
       [-5.72950264e-02, -2.80297738e-03, -5.18321033e-04,
        -1.04130219e-01, -4.65746365e-02],
       [ 1.56203199e-01,  1.03330386e-01,  9.07309487e-02,
         1.76520246e-01,  1.37011366e-01],
       [-6.25627059e-02,  4.87433426e-03, -1.36736856e-02,
        -9.80486765e-02, -5.34846625e-02],
       [-6.42301425e-02, -5.90588555e-03,  6.37252849e-04,
        -9.41589340e-02, -5.79537126e-02],
       [-6.94776647e-02, -1.24708847e-02, -6.25761167e-03,
        -1.04266921e-01, -5.67716876e-02]], dtype=float64), Array([[ 0.12473132,  0.11116961, -0.0490423 ,  0.1301544 ,  0.10838575,
         0.10204363, -0.06764781,  0.123626  ,  0.14027874,  0.12080794],
       [ 0.11611746,  0.12322911, -0.07962635,  0.10880937,  0.11687957,
         0.13972251, -0.05402641,  0.11641232,  0.10931058,  0.12293509],
       [ 0.11140809,  0.13536038, -0.06336026,  0.10907319,  0.11818522,
         0.12164396, -0.05321298,  0.12994192,  0.1118587 ,  0.12674216],
       [ 0.12154773,  0.09887625, -0.08559577,  0.11062997,  0.11833581,
         0.11846009, -0.05887513,  0.12477873,  0.14245275,  0.11723156],
       [ 0.12744752,  0.12011109, -0.05628723,  0.09956438,  0.11721574,
         0.11810449, -0.06964851,  0.12298958,  0.12206646,  0.13829256],
       [ 0.11014971,  0.11393968, -0.0741227 ,  0.12059285,  0.12227362,
         0.10574345, -0.05033569,  0.11355863,  0.11328958,  0.13003926],
       [ 0.1145767 ,  0.11011362, -0.08258057,  0.12532833,  0.12311363,
         0.13597114, -0.07264328,  0.10972297,  0.10987042,  0.10861069],
       [ 0.1263974 ,  0.1183471 , -0.06572039,  0.11821163,  0.11917887,
         0.10885049, -0.05983133,  0.13977885,  0.1267724 ,  0.12606822],
       [ 0.10535797,  0.10193846, -0.06648197,  0.09017925,  0.10382435,
         0.1004039 , -0.04274045,  0.1144878 ,  0.11477373,  0.11155618],
       [ 0.12296188,  0.11434833, -0.06189586,  0.12587946,  0.13449613,
         0.10554107, -0.07230162,  0.1142034 ,  0.1225649 ,  0.13495207]],      dtype=float64), Array([[-0.19722404, -0.20201065, -0.19035363, -0.18237817, -0.18319805,
        -0.19556736, -0.18717054, -0.18768364, -0.18198558, -0.19063498]],      dtype=float64)]}), 'mass_transfer_coefficient_constant': Array([160.0726418], dtype=float64), 'mass_transfer_coefficient_falling': defaultdict(<class 'list'>, {'bias': [Array([-0.38359198,  0.01762461, -0.33841813,  0.21855092,  0.18958525,
        0.00647191, -0.00884282, -0.00881121,  0.00606508,  0.01529383],      dtype=float64), Array([ 3.10851465e-01, -1.00107855e-02,  2.77567072e-01, -1.67178146e-01,
       -2.29479267e-01,  3.01181430e-04,  1.31811661e-02,  2.14944720e-02,
       -1.35098972e-02, -2.26543737e-03], dtype=float64), Array([0.04743615], dtype=float64)], 'weight': [Array([[-0.18814907,  0.13612074,  0.17345756, -0.42365328, -0.01479238],
       [-0.19878799,  0.13268298,  0.16647804, -0.4062959 , -0.01603451],
       [-0.15753201,  0.13771236,  0.1698568 , -0.39846559, -0.00803513],
       [-0.19041992,  0.13406204,  0.15419975, -0.40221633, -0.00496971],
       [-0.1858413 ,  0.14775182,  0.17062124, -0.44587367, -0.02586201],
       [-0.14708646,  0.11809261,  0.17698514, -0.40841072, -0.00045648],
       [-0.19527038,  0.12629215,  0.15264227, -0.43404876, -0.0189132 ],
       [-0.14763536,  0.13507221,  0.16886671, -0.40344641,  0.00058349],
       [-0.17315694,  0.14332174,  0.18688954, -0.3924315 , -0.01641668],
       [-0.18982289,  0.13614417,  0.17005935, -0.39190832, -0.00325488]],      dtype=float64), Array([[-0.1674565 , -0.1459749 , -0.1554088 , -0.15873204, -0.16443502,
        -0.16019781, -0.16350296, -0.1393221 , -0.17682849, -0.16431484],
       [-0.16925171, -0.16607632, -0.16096932, -0.16405825, -0.19119509,
        -0.13806245, -0.15509423, -0.13552564, -0.1584904 , -0.16839591],
       [-0.17506965, -0.16122474, -0.15474619, -0.16846887, -0.17551258,
        -0.13066741, -0.16468208, -0.12915185, -0.18208096, -0.15098681],
       [-0.16530022, -0.16488768, -0.15921278, -0.15156355, -0.18171309,
        -0.14377489, -0.17267586, -0.14638135, -0.17457968, -0.16269441],
       [-0.16722922, -0.18282749, -0.16414459, -0.15148446, -0.19492859,
        -0.13428146, -0.15315616, -0.12411154, -0.16115087, -0.15102839],
       [-0.15398071, -0.15513753, -0.15076462, -0.15108541, -0.18902302,
        -0.11820243, -0.16161932, -0.14695674, -0.16922639, -0.16160651],
       [-0.15826429, -0.15429246, -0.16052006, -0.15256314, -0.1786059 ,
        -0.12688804, -0.16394052, -0.14171776, -0.18412774, -0.15771111],
       [-0.14419433, -0.16639144, -0.15642729, -0.15039689, -0.17962599,
        -0.17468266, -0.1653771 , -0.15823014, -0.13993723, -0.16452516],
       [-0.15734161, -0.14324071, -0.16789321, -0.1570035 , -0.18765788,
        -0.1257615 , -0.15447087, -0.14711726, -0.1501208 , -0.15287863],
       [-0.15737436, -0.1694005 , -0.16488124, -0.14954707, -0.18301157,
        -0.12729739, -0.18861271, -0.12896602, -0.17160442, -0.17115628]],      dtype=float64), Array([[-0.25391   , -0.25201846, -0.25009622, -0.24933434, -0.25128652,
        -0.24826757, -0.26122508, -0.26043836, -0.24966485, -0.2452161 ]],      dtype=float64)]})})}
---------------------------------------------------------------------------------------------------- 
Initial guess of solid moisture [Array([0.0998537], dtype=float64)]
---------------------------------------------------------------------------------------------------- 
def objective(diff_args : Tuple[jnp.ndarray, List[jnp.ndarray], jnp.ndarray], pmap_args : Tuple[jnp.ndarray], 
                key : jnp.ndarray, _product_list : List[str]) -> Tuple[jnp.ndarray, List[jnp.ndarray]] :
    
    # Function used only for training. For loop over the list of unique products 
    meta_params_flatten, moist_init, moist_sigma = diff_args
    moist_init = [moist_init[product_list.index(prod[:3])] for prod in _product_list]

    asum, cost, *solution = zip(*[
        _objective_pmap(meta_params_flatten, _args[0], moist_sigma, *_args[1:], pargs.recirculation, key)
        for _args in zip(moist_init, *pmap_args)
    ])

    _kl = 0
    for _mi in moist_init:
        _kl += kl_div(_mi, moist_sigma, 0.1, 0.005)

    asum = tree_util.tree_reduce(operator.add, tree_util.tree_map(jnp.sum, asum)) + jnp.sum(_kl)
    return asum, cost, solution

---------------------------------------------------------------------------------------------------- 
Piecewise constant learning rate with boundaries [2000, 3000] and values [0.01, 0.001, 0.0001]
---------------------------------------------------------------------------------------------------- 
NLP Options {'aux_args': Array([1931546366, 1873410571], dtype=uint32),
 'epochs': 100,
 'opt_state': OptimizerState(packed_state=([Array([ 2.10102179e+00,  4.82498078e+00,  4.81120562e+00,  4.48469879e+00,
        5.00355238e+00,  4.93803108e+00,  8.29285159e-02,  5.66527271e-01,
       -3.73300556e-01,  1.44951413e-01, -6.35030006e-02, -3.12466858e-02,
        1.30942947e-01, -3.07290237e-03,  8.73461047e-04, -2.17986576e-03,
        3.16654193e-03, -2.60600736e-04, -3.11778378e-01,  1.24321965e-01,
       -1.15605555e-01, -3.46532966e-02,  1.48701308e-01, -7.82286548e-03,
       -1.53581188e-02,  1.56551978e-03, -2.66263540e-03,  1.26365416e-02,
        1.01085257e-01, -7.41036575e-02, -1.67276593e-02,  4.27669979e-03,
       -1.09683205e-01, -5.09682673e-02, -6.35999436e-02,  1.49733149e-02,
       -1.21630396e-02, -8.20144007e-02, -6.75018817e-02,  1.52763263e-01,
        9.46074048e-02,  1.12804649e-01,  1.70202994e-01,  1.43958363e-01,
       -7.89172876e-02, -2.12456393e-02,  2.77878707e-03, -1.19392595e-01,
       -5.66064676e-02, -6.03388590e-02,  4.90537246e-04,  2.04226539e-03,
       -9.96207849e-02, -5.87034000e-02, -5.69961406e-02, -2.30529146e-03,
        2.14463791e-05, -1.04032510e-01, -4.62190393e-02,  1.56161730e-01,
        1.03172529e-01,  9.05355665e-02,  1.76571808e-01,  1.36941152e-01,
       -6.22634071e-02,  5.37047969e-03, -1.31360763e-02, -9.79494446e-02,
       -5.31290452e-02, -6.39278477e-02, -5.40696135e-03,  1.17741931e-03,
       -9.40569142e-02, -5.75950753e-02, -6.91778776e-02, -1.19751718e-02,
       -5.72073134e-03, -1.04166662e-01, -5.64157814e-02,  1.24636854e-01,
        1.11041646e-01, -4.87515237e-02,  1.30044044e-01,  1.08276803e-01,
        1.01966601e-01, -6.73531839e-02,  1.23526049e-01,  1.40170168e-01,
        1.20697502e-01,  1.16024276e-01,  1.23102866e-01, -7.93379670e-02,
        1.08700493e-01,  1.16772088e-01,  1.39646533e-01, -5.37341750e-02,
        1.16313717e-01,  1.09203479e-01,  1.22826137e-01,  1.11311840e-01,
        1.35230167e-01, -6.30666049e-02,  1.08960831e-01,  1.18074285e-01,
        1.21565383e-01, -5.29154934e-02,  1.29840104e-01,  1.11748152e-01,
        1.26629716e-01,  1.21450412e-01,  9.87446229e-02, -8.53002623e-02,
        1.10516391e-01,  1.18223654e-01,  1.18380618e-01, -5.85758092e-02,
        1.24675793e-01,  1.42340983e-01,  1.17117892e-01,  1.27349390e-01,
        1.19978574e-01, -5.59907252e-02,  9.94499457e-02,  1.17102733e-01,
        1.18024265e-01, -6.93481826e-02,  1.22885819e-01,  1.21953851e-01,
        1.38178033e-01,  1.10057846e-01,  1.13814167e-01, -7.38339551e-02,
        1.20485052e-01,  1.22167201e-01,  1.05669049e-01, -5.00430895e-02,
        1.13461257e-01,  1.13183556e-01,  1.29931382e-01,  1.14481897e-01,
        1.09984912e-01, -8.22885165e-02,  1.25217458e-01,  1.23004164e-01,
        1.35893948e-01, -7.23473941e-02,  1.09622616e-01,  1.09761344e-01,
        1.08499742e-01,  1.26298413e-01,  1.18214122e-01, -6.54241525e-02,
        1.18096505e-01,  1.19065179e-01,  1.08769234e-01, -5.95312810e-02,
        1.39674287e-01,  1.26659097e-01,  1.25953012e-01,  1.05270635e-01,
        1.01815438e-01, -6.61909650e-02,  9.00750669e-02,  1.03721558e-01,
        1.00334978e-01, -4.24454682e-02,  1.14394644e-01,  1.14671390e-01,
        1.11451933e-01,  1.22864332e-01,  1.14217068e-01, -6.16016946e-02,
        1.25765913e-01,  1.34384005e-01,  1.05461099e-01, -7.20036292e-02,
        1.14100322e-01,  1.22453153e-01,  1.34838430e-01, -1.97252315e-01,
       -2.02035448e-01, -1.90381534e-01, -1.82400263e-01, -1.83223682e-01,
       -1.95595939e-01, -1.87191021e-01, -1.87707778e-01, -1.82028396e-01,
       -1.90657306e-01,  1.60073183e+02, -3.83846797e-01,  1.79830773e-02,
       -3.38695647e-01,  2.18398560e-01,  1.89560699e-01,  6.47191006e-03,
       -8.84281571e-03, -8.81120521e-03,  6.06508191e-03,  1.52938343e-02,
        3.11019873e-01, -1.03102034e-02,  2.77730900e-01, -1.67142986e-01,
       -2.29471485e-01,  3.01181430e-04,  1.31811661e-02,  2.14944720e-02,
       -1.35098972e-02, -2.26543737e-03,  4.76382269e-02, -1.88281991e-01,
        1.36713760e-01,  1.74123289e-01, -4.24654353e-01, -1.45177507e-02,
       -1.98919066e-01,  1.33282949e-01,  1.67151054e-01, -4.07303766e-01,
       -1.57547305e-02, -1.57668115e-01,  1.38284875e-01,  1.70500644e-01,
       -3.99442596e-01, -7.77435565e-03, -1.90555016e-01,  1.34631112e-01,
        1.54839682e-01, -4.03187029e-01, -4.71043341e-03, -1.85969011e-01,
        1.48386404e-01,  1.71331737e-01, -4.46924708e-01, -2.55600332e-02,
       -1.47227780e-01,  1.18657201e-01,  1.77621557e-01, -4.09383609e-01,
       -2.03532506e-04, -1.95398386e-01,  1.26907440e-01,  1.53331529e-01,
       -4.35073231e-01, -1.86226037e-02, -1.47778442e-01,  1.35634177e-01,
        1.69500628e-01, -4.04418301e-01,  8.33845635e-04, -1.73290965e-01,
        1.43913952e-01,  1.87554574e-01, -3.93433244e-01, -1.61431461e-02,
       -1.89962106e-01,  1.36707715e-01,  1.70694086e-01, -3.92877516e-01,
       -3.00127198e-03, -1.67859204e-01, -1.46386417e-01, -1.55773452e-01,
       -1.59086337e-01, -1.64929437e-01, -1.60530618e-01, -1.63936532e-01,
       -1.39652014e-01, -1.77237352e-01, -1.64663478e-01, -1.69652217e-01,
       -1.66485173e-01, -1.61332667e-01, -1.64411310e-01, -1.91682615e-01,
       -1.38393914e-01, -1.55523002e-01, -1.35854354e-01, -1.58897018e-01,
       -1.68743602e-01, -1.75471574e-01, -1.61635013e-01, -1.55110903e-01,
       -1.68823282e-01, -1.76001509e-01, -1.31000174e-01, -1.65112211e-01,
       -1.29481869e-01, -1.82489012e-01, -1.51335869e-01, -1.65702746e-01,
       -1.65298802e-01, -1.59577513e-01, -1.51917884e-01, -1.82205390e-01,
       -1.44107657e-01, -1.73107969e-01, -1.46711288e-01, -1.74988430e-01,
       -1.63043261e-01, -1.67631280e-01, -1.83237891e-01, -1.64509508e-01,
       -1.51839084e-01, -1.95417538e-01, -1.34614465e-01, -1.53586378e-01,
       -1.24441798e-01, -1.61559049e-01, -1.51377668e-01, -1.54388512e-01,
       -1.55554243e-01, -1.51133981e-01, -1.51444313e-01, -1.89523561e-01,
       -1.18539710e-01, -1.62058333e-01, -1.47291078e-01, -1.69640419e-01,
       -1.61959719e-01, -1.58660641e-01, -1.54696822e-01, -1.60880295e-01,
       -1.52913333e-01, -1.79085313e-01, -1.27216665e-01, -1.64363345e-01,
       -1.42043769e-01, -1.84530030e-01, -1.58056096e-01, -1.44596345e-01,
       -1.66802565e-01, -1.56790873e-01, -1.50750144e-01, -1.80122673e-01,
       -1.75014594e-01, -1.65811725e-01, -1.58559097e-01, -1.40345394e-01,
       -1.64872562e-01, -1.57751094e-01, -1.43659380e-01, -1.68263740e-01,
       -1.57363527e-01, -1.88162836e-01, -1.26099949e-01, -1.54913094e-01,
       -1.47452677e-01, -1.50536515e-01, -1.53232789e-01, -1.57777862e-01,
       -1.69812400e-01, -1.65247238e-01, -1.49902653e-01, -1.83502900e-01,
       -1.27631290e-01, -1.89044644e-01, -1.29297157e-01, -1.72014126e-01,
       -1.71506516e-01, -2.54320340e-01, -2.52426547e-01, -2.50506662e-01,
       -2.49742429e-01, -2.51699132e-01, -2.48686223e-01, -2.61634650e-01,
       -2.60850032e-01, -2.50086112e-01, -2.45625478e-01], dtype=float64), Array([ 1.57481041e-01,  2.56112430e-01,  1.88333137e-01,  2.13627314e-01,
        1.07861588e-03,  8.13925692e-01, -1.61839265e+02, -7.33920115e+00,
        4.05296824e-02, -2.15851330e-01, -3.67728952e-02, -1.51112397e-02,
        3.13958659e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  9.00027198e-02, -2.58115452e-01,
       -5.43392713e-02, -2.09195598e-02,  3.84063831e-03,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        9.01466419e-02, -1.94824561e-03, -2.23244637e-02, -2.76430142e-02,
       -9.00435109e-05, -2.20282581e-01, -1.78007542e-03, -2.01663748e-02,
       -2.48760973e-02, -8.59109525e-05, -2.00595215e-01,  8.36387127e-05,
        2.46047230e-03,  3.55659064e-03, -1.88558038e-05,  1.42880589e-02,
       -1.83850616e-03, -2.09709065e-02, -2.59288822e-02, -8.64000174e-05,
       -2.07591257e-01, -1.90955662e-03, -2.17506323e-02, -2.68816008e-02,
       -9.04210879e-05, -2.15516620e-01, -1.94340349e-03, -2.23608253e-02,
       -2.77259431e-02, -8.85356872e-05, -2.20000652e-01,  9.68390804e-05,
        2.48430678e-03,  3.54882598e-03, -1.62051851e-05,  1.53534961e-02,
       -1.97979186e-03, -2.26794881e-02, -2.80735975e-02, -9.14934254e-05,
       -2.23852639e-01, -1.96004727e-03, -2.23556258e-02, -2.76388785e-02,
       -9.22162612e-05, -2.21312014e-01, -1.99423781e-03, -2.27849089e-02,
       -2.81799903e-02, -9.29693249e-05, -2.25309431e-01,  4.65116399e-03,
        7.50944133e-03, -2.39583213e-02,  5.85827557e-03,  5.82276918e-03,
        3.51789537e-03, -2.37040421e-02,  5.03366775e-03,  5.75109777e-03,
        5.82521278e-03,  4.73105181e-03,  7.63930623e-03, -2.43762133e-02,
        5.95925875e-03,  5.92316996e-03,  3.57797717e-03, -2.41175330e-02,
        5.12018800e-03,  5.85022804e-03,  5.92558731e-03,  4.50211717e-03,
        7.26016860e-03, -2.31206978e-02,  5.66685362e-03,  5.63275781e-03,
        3.40860873e-03, -2.28745897e-02,  4.87114150e-03,  5.56353790e-03,
        5.63490231e-03,  4.26783403e-03,  6.88117799e-03, -2.19061874e-02,
        5.37139907e-03,  5.33925714e-03,  3.23175506e-03, -2.16727907e-02,
        4.61739169e-03,  5.27360556e-03,  5.34106183e-03,  4.33285983e-03,
        6.97724108e-03, -2.21702712e-02,  5.44952689e-03,  5.41705994e-03,
        3.28445448e-03, -2.19334205e-02,  4.68656830e-03,  5.35060847e-03,
        5.41882022e-03,  4.51832712e-03,  7.34807749e-03, -2.37010955e-02,
        5.71356721e-03,  5.67764761e-03,  3.39636225e-03, -2.34537417e-02,
        4.89736943e-03,  5.60698354e-03,  5.68109191e-03,  4.32693088e-03,
        6.99782508e-03, -2.23811844e-02,  5.45487217e-03,  5.42171665e-03,
        3.26802705e-03, -2.21444216e-02,  4.68430508e-03,  5.35473369e-03,
        5.42395711e-03,  4.48428701e-03,  7.18880671e-03, -2.26853737e-02,
        5.62624017e-03,  5.59351556e-03,  3.41204240e-03, -2.24404468e-02,
        4.84580021e-03,  5.52536864e-03,  5.59466563e-03,  3.95943770e-03,
        6.62507622e-03, -2.22660744e-02,  5.08599377e-03,  5.04940166e-03,
        2.90250146e-03, -2.20481969e-02,  4.31787769e-03,  4.98389185e-03,
        5.05637542e-03,  4.51974895e-03,  7.25559114e-03, -2.29443682e-02,
        5.67495579e-03,  5.64172763e-03,  3.43508821e-03, -2.26974303e-02,
        4.88548766e-03,  5.57283741e-03,  5.64304813e-03,  1.37831774e-02,
        1.22127148e-02,  1.36404078e-02,  1.09548037e-02,  1.26362764e-02,
        1.36016895e-02,  1.01222752e-02,  1.21390876e-02,  1.77383268e-02,
        1.12499757e-02, -1.83351348e-03,  2.34151698e-03, -3.49209234e-02,
        2.40970580e-03,  2.95798817e-03,  1.60919900e-04,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -1.64484283e-03,  2.29177417e-02, -1.64171445e-03, -6.68698385e-04,
       -6.39190275e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00, -9.43221423e-03,  1.03918547e-04,
       -3.84217551e-03, -4.77766245e-03,  1.51273102e-04, -2.13447682e-02,
        1.01718899e-04, -3.86287581e-03, -4.79858686e-03,  1.51248441e-04,
       -2.16057386e-02,  1.06133898e-04, -3.69010921e-03, -4.60021042e-03,
        1.46915955e-04, -2.01652173e-02,  1.02990110e-04, -3.58576422e-03,
       -4.47060031e-03,  1.42570032e-04, -1.95973691e-02,  1.08572768e-04,
       -4.49086969e-03, -5.56108872e-03,  1.73210679e-04, -2.56331561e-02,
        9.38876151e-05, -3.09177386e-03, -3.86361453e-03,  1.24332294e-04,
       -1.66320622e-02,  1.00248689e-04, -4.00667140e-03, -4.96771291e-03,
        1.55347024e-04, -2.26919069e-02,  9.58036931e-05, -3.09929251e-03,
       -3.87606940e-03,  1.25140374e-04, -1.65829538e-02,  1.08152740e-04,
       -3.95873891e-03, -4.92418777e-03,  1.56265550e-04, -2.19365587e-02,
        1.08811500e-04, -3.63413095e-03, -4.53855420e-03,  1.45852531e-04,
       -1.96275770e-02,  7.68208022e-04,  7.20693834e-04,  8.47079818e-04,
        8.35092762e-04,  6.34194383e-04,  9.17712367e-04,  6.24478654e-04,
        9.45421483e-04,  8.00122706e-04,  9.06395818e-04,  7.61446890e-04,
        7.14215507e-04,  8.39914031e-04,  8.28029377e-04,  6.28163789e-04,
        9.10199194e-04,  6.18574546e-04,  9.37755610e-04,  7.93149998e-04,
        8.98911400e-04,  7.59321480e-04,  7.12243043e-04,  8.37617402e-04,
        8.25829590e-04,  6.26346095e-04,  9.07762112e-04,  6.16911494e-04,
        9.35240469e-04,  7.90876173e-04,  8.96469605e-04,  7.49893041e-04,
        7.03313584e-04,  8.27231239e-04,  8.15473660e-04,  6.18528420e-04,
        8.96499801e-04,  6.08993630e-04,  9.23671003e-04,  7.81188469e-04,
        8.85388630e-04,  7.65419778e-04,  7.17958508e-04,  8.44420839e-04,
        8.32583121e-04,  6.31265071e-04,  9.15208624e-04,  6.21851671e-04,
        9.42920161e-04,  7.97195471e-04,  9.03789262e-04,  7.61148605e-04,
        7.14115956e-04,  8.39452415e-04,  8.27748808e-04,  6.28149952e-04,
        9.09613064e-04,  6.18875488e-04,  9.37072903e-04,  7.92612977e-04,
        8.98295341e-04,  7.96093121e-04,  7.46826432e-04,  8.78040446e-04,
        8.65721242e-04,  6.56901567e-04,  9.51455423e-04,  6.47062425e-04,
        9.80210593e-04,  8.29100073e-04,  9.39635531e-04,  7.87045157e-04,
        7.38384317e-04,  8.67800480e-04,  8.55508696e-04,  6.49823374e-04,
        9.40114448e-04,  6.39845262e-04,  9.68488184e-04,  8.19742416e-04,
        9.28535366e-04,  7.67832856e-04,  7.20495748e-04,  8.46637622e-04,
        8.34863422e-04,  6.33960846e-04,  9.17242166e-04,  6.24636954e-04,
        9.44876115e-04,  7.99495082e-04,  9.05858598e-04,  7.40994354e-04,
        6.94935826e-04,  8.17589686e-04,  8.06042037e-04,  6.10929087e-04,
        8.86213318e-04,  6.01670373e-04,  9.13098149e-04,  7.71879665e-04,
        8.75162862e-04,  7.00340831e-03,  7.01111696e-03,  6.95392276e-03,
        7.05977122e-03,  6.91495736e-03,  6.84427174e-03,  6.92024744e-03,
        7.01700481e-03,  6.81181750e-03,  6.99906418e-03], dtype=float64), Array([5.20222361e-01, 1.57717203e-01, 2.15329612e-02, 1.88166107e-02,
       3.69586213e-06, 1.95429900e+00, 1.63130384e+05, 1.61284865e+02,
       5.77712647e-03, 1.09888813e-01, 2.17864604e-03, 4.99797266e-04,
       4.12148319e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 4.58079962e-02, 3.11984686e-01,
       1.67972027e-02, 1.62606775e-03, 1.31705924e-04, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.54736551e-01, 1.66223899e-05, 7.93669135e-04, 1.03617011e-03,
       3.22891198e-07, 1.50520232e-01, 1.30437622e-05, 6.23445511e-04,
       8.11766614e-04, 2.53827111e-07, 1.18228302e-01, 2.26721331e-06,
       1.02530746e-04, 1.36707137e-04, 4.10530076e-08, 1.98626169e-02,
       1.44744721e-05, 6.91313844e-04, 9.01587112e-04, 2.81349801e-07,
       1.31116519e-01, 1.55119213e-05, 7.40969821e-04, 9.66112010e-04,
       3.01513289e-07, 1.40525003e-01, 1.66414963e-05, 7.94589945e-04,
       1.03857410e-03, 3.23173117e-07, 1.50664087e-01, 2.14649827e-06,
       9.74895857e-05, 1.29860500e-04, 3.88774700e-08, 1.88209917e-02,
       1.72228925e-05, 8.22482436e-04, 1.07334819e-03, 3.34615414e-07,
       1.55968532e-01, 1.65481241e-05, 7.90283016e-04, 1.03053739e-03,
       3.21599062e-07, 1.49891706e-01, 1.74182677e-05, 8.31595766e-04,
       1.08443830e-03, 3.38455101e-07, 1.57748684e-01, 9.54227642e-04,
       1.35549308e-03, 2.67221854e-03, 1.10928977e-03, 1.12429358e-03,
       8.21002295e-04, 2.54793011e-03, 9.98252729e-04, 1.10448525e-03,
       1.09516264e-03, 1.01454315e-03, 1.44142893e-03, 2.81239881e-03,
       1.17931931e-03, 1.19547202e-03, 8.73044728e-04, 2.68085311e-03,
       1.06136854e-03, 1.17434643e-03, 1.16433779e-03, 8.61134831e-04,
       1.22363298e-03, 2.44011952e-03, 1.00133031e-03, 1.01472917e-03,
       7.40638347e-04, 2.32730959e-03, 9.00911445e-04, 9.96887181e-04,
       9.88542338e-04, 7.56997139e-04, 1.07572602e-03, 2.16313396e-03,
       8.80320314e-04, 8.91998287e-04, 6.50983056e-04, 2.06362115e-03,
       7.91969580e-04, 8.76343975e-04, 8.69050960e-04, 7.67422595e-04,
       1.09117980e-03, 2.20062094e-03, 8.92687563e-04, 9.04528941e-04,
       6.59748420e-04, 2.09946080e-03, 8.02945461e-04, 8.88641674e-04,
       8.81256232e-04, 9.52206008e-04, 1.34915249e-03, 2.65216050e-03,
       1.10573499e-03, 1.12050468e-03, 8.20203846e-04, 2.52894559e-03,
       9.95779116e-04, 1.10090220e-03, 1.09165823e-03, 8.19870400e-04,
       1.16365334e-03, 2.31166982e-03, 9.52843531e-04, 9.65565789e-04,
       7.05557646e-04, 2.20475367e-03, 8.57596946e-04, 9.48626365e-04,
       9.40677784e-04, 8.07762881e-04, 1.15034180e-03, 2.30829726e-03,
       9.40181628e-04, 9.52848628e-04, 6.94006914e-04, 2.20172652e-03,
       8.45337979e-04, 9.36008292e-04, 9.28157533e-04, 8.09055000e-04,
       1.14153234e-03, 2.30450413e-03, 9.38025727e-04, 9.49806189e-04,
       6.98029411e-04, 2.19897540e-03, 8.45600338e-04, 9.33572036e-04,
       9.26084820e-04, 8.44946945e-04, 1.20265142e-03, 2.39461524e-03,
       9.83167728e-04, 9.96487165e-04, 7.26217718e-04, 2.28364374e-03,
       8.84181384e-04, 9.78866529e-04, 9.70616200e-04, 9.35551340e-02,
       9.54834833e-02, 9.40735376e-02, 9.67378478e-02, 9.56845046e-02,
       8.91386609e-02, 9.61190380e-02, 9.95528000e-02, 6.75570550e-02,
       9.99040173e-02, 4.52338785e-06, 3.32373622e-05, 3.73547955e-03,
       2.96773514e-05, 1.48359082e-04, 1.69061289e-05, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       3.75492436e-05, 2.30603769e-03, 3.95270684e-05, 1.42377953e-04,
       2.65507099e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 8.57575065e-04, 2.40590469e-07,
       1.65231701e-05, 2.02728891e-05, 8.98698408e-09, 2.37776674e-03,
       2.37056239e-07, 1.63167240e-05, 2.00101805e-05, 8.86329429e-09,
       2.34743367e-03, 2.39342089e-07, 1.63525933e-05, 2.00943819e-05,
       8.89950758e-09, 2.35365944e-03, 2.28741164e-07, 1.56279259e-05,
       1.92105328e-05, 8.48989924e-09, 2.24875247e-03, 2.84488909e-07,
       1.97135491e-05, 2.41143625e-05, 1.06890116e-08, 2.83615044e-03,
       1.73719087e-07, 1.18036825e-05, 1.45071337e-05, 6.42763378e-09,
       1.70185844e-03, 2.41426149e-07, 1.66909065e-05, 2.04468471e-05,
       9.04964119e-09, 2.40011348e-03, 1.76466041e-07, 1.19725537e-05,
       1.47160940e-05, 6.52484757e-09, 1.72691314e-03, 2.56311569e-07,
       1.75885106e-05, 2.15801502e-05, 9.57712821e-09, 2.53155376e-03,
       2.40460918e-07, 1.63687887e-05, 2.01242386e-05, 8.91295204e-09,
       2.35770999e-03, 1.43239429e-06, 1.20723841e-06, 2.12405178e-06,
       2.18676931e-06, 6.47640523e-07, 2.99302192e-06, 8.16557470e-07,
       3.23247372e-06, 1.50739552e-06, 2.66047342e-06, 1.42279798e-06,
       1.20114148e-06, 2.10333795e-06, 2.16507230e-06, 6.53468251e-07,
       2.96811904e-06, 8.19238881e-07, 3.20337925e-06, 1.49762299e-06,
       2.63094166e-06, 1.40486811e-06, 1.18625218e-06, 2.07611837e-06,
       2.13716858e-06, 6.45960524e-07, 2.92913710e-06, 8.09674849e-07,
       3.16112133e-06, 1.47864342e-06, 2.59632024e-06, 1.36610416e-06,
       1.15195630e-06, 2.02472498e-06, 2.08483433e-06, 6.21344893e-07,
       2.85684697e-06, 7.81828575e-07, 3.08485703e-06, 1.43773256e-06,
       2.53547862e-06, 1.42654643e-06, 1.20464235e-06, 2.10770528e-06,
       2.16962794e-06, 6.56103953e-07, 2.97322192e-06, 8.22364948e-07,
       3.20857925e-06, 1.50144375e-06, 2.63551684e-06, 1.37122500e-06,
       1.15594927e-06, 2.03310750e-06, 2.09374256e-06, 6.19888364e-07,
       2.86294740e-06, 7.82196105e-07, 3.09201762e-06, 1.44259575e-06,
       2.54588134e-06, 1.58793946e-06, 1.34268920e-06, 2.33843607e-06,
       2.40559652e-06, 7.39024225e-07, 3.29944401e-06, 9.21801706e-07,
       3.55830922e-06, 1.67191052e-06, 2.92013276e-06, 1.50861630e-06,
       1.26968520e-06, 2.24240114e-06, 2.30855990e-06, 6.73764536e-07,
       3.15747632e-06, 8.53100330e-07, 3.41177883e-06, 1.58765261e-06,
       2.81192812e-06, 1.38396351e-06, 1.16570577e-06, 2.05510944e-06,
       2.11658936e-06, 6.20416175e-07, 2.89114895e-06, 7.85310706e-07,
       3.12357629e-06, 1.45581162e-06, 2.57510797e-06, 1.32746084e-06,
       1.12041295e-06, 1.96422909e-06, 2.02256447e-06, 6.08558310e-07,
       2.77274987e-06, 7.63758696e-07, 2.99299544e-06, 1.39707824e-06,
       2.45774176e-06, 1.14658832e-04, 1.16184504e-04, 1.12989152e-04,
       1.17800418e-04, 1.10552470e-04, 1.05204082e-04, 1.12374375e-04,
       1.14358422e-04, 1.02922215e-04, 1.15054275e-04], dtype=float64)], [Array([0.09960291], dtype=float64), Array([165.00783888], dtype=float64), Array([170390.09463795], dtype=float64)], [Array([0.00299269], dtype=float64), Array([184.19863674], dtype=float64), Array([98526.82685428], dtype=float64)]), tree_def=PyTreeDef((*, [*], *)), subtree_defs=(PyTreeDef((*, *, *)), PyTreeDef((*, *, *)), PyTreeDef((*, *, *)))),
 'print_every_epoch': 1,
 'step_size': <function piecewise_constant.<locals>.schedule at 0x000001CD461C8700>}
---------------------------------------------------------------------------------------------------- 
Started Optimization
